/**
 * Generate and export a string variable of the YAML file needed
 * by Swagger UI to create the HTML of the webpage.
 * This string is generated by copying the content of each YAML
 * files inside the swagger folder, in the corect order.
 */

const path = require('path')
const fs = require('fs')

// Initialise the string and specify which OAS version we use
let yaml = 'openapi: 3.0.1' + "\n"


/**
 * Add the indent character X times at the begining of each line
 * inside @content variable. X is the value of @indent variable.
 * 
 * @param {string} content string to indent
 * @param {integer} indent how many times to indent each line
 * @returns 
 */
function addIndent (content, indent = 0) {
    // Duplicate @indentChar X times inside @indentChars. X is @indent value
    let indentChar = '  '
    let indentChars = ''
    for(let i = 0 ; i < indent ; i++) { indentChars += indentChar }

    // Split the @content by lines, and prepare the return value
    arrLines = content.split("\n")
    let contentRet = ''

    // For each line, add @indentChars at the begining, and concat it to @contentRet
    arrLines.forEach(function (str) { contentRet += indentChars + str + "\n" })

    return contentRet
}

/**
 * Add one line to the yaml variable, after indenting it with addIndent()
 * 
 * @param {string} string line to add
 * @param {integer} indent how many tabs to indent each line
 */
function addLine (string, indent) { yaml += addIndent(string + "\n", indent) }

/**
 * Extract the file content, indent it with addIndent() and
 * add it to the end of yaml variable.
 * 
 * @param {string} filePath path of the file
 * @param {integer} indent how many tabs to indent each line
 */
function addFile(filePath, indent){
    const fileContent = fs.readFileSync(filePath,{ encoding: 'utf8' })
    yaml += addIndent(fileContent, indent)
}

/**
 * Recursively add every files from a folder and from it's sub folder
 * 
 * @param {string} startPath starting directory path
 * @param {integer} indent how many tabs to indent
 */
function addDir(startPath, indent){
    // Path did not exist, stop
    if ( !fs.existsSync(startPath) ){ return }

    // List files inside the folder and loop over the list
    const files = fs.readdirSync(startPath)
    for(let i = 0 ; i < files.length ; i++) {

        // Extract filePath and file information (needed for isDirectory())
        const filePath = path.join(startPath, files[i])
        const stat = fs.lstatSync(filePath)

        // if isDirectory, recursively look for each file inside the folder
        if (stat.isDirectory()) {
            addDir(filePath, indent)

        // if file with .yaml extention, copy its content to yaml variable
        } else if (filePath.indexOf('.yaml') >= 0) {
            addFile(filePath, indent)
        }
    }
}


// Copy the content of swagger/tags.yaml inside the string
addLine('tags:')
    addFile('./swagger/tags.yaml', 1)

// Copy the content of swagger/paths/*.yaml inside the string
addLine('paths:')
    addDir('./swagger/paths', 1)

addLine('components:')

// Copy the content of swagger/schemas/*.yaml inside the string
    addLine('schemas:', 1)
        addDir('./swagger/schemas', 2)

// Print the result inside terminal and export the string
console.debug(yaml)
module.exports = yaml
